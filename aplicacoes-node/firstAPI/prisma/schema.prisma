// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

// datasource db {
//   provider = "sqlite"
//   url      = "file:./dev.db"
// }

model User {
    id             String       @id @default(uuid())
    name           String
    email          String       @unique
    password       String
    created_at     DateTime     @default(now())
    updated_at     DateTime     @updatedAt
    store          Store[]
    user_access    UserAccess[]
    sale_as_buyer  Sale[]       @relation("buyer")
    sale_as_seller Sale[]       @relation("seller")
}

model UserAccess {
    id String @id @default(uuid())

    User   User?   @relation(fields: [userId], references: [id])
    userId String?

    Access   Access? @relation(fields: [accessId], references: [id])
    accessId String?

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

model Access {
    id          String       @id @default(uuid())
    name        String       @unique
    created_at  DateTime     @default(now())
    updated_at  DateTime     @updatedAt
    user_access UserAccess[]
}

model Product {
    id          String        @id @default(uuid())
    name        String
    price       Float
    amount      Int
    created_at  DateTime      @default(now())
    updated_at  DateTime      @updatedAt
    Store       Store?        @relation(fields: [storeId], references: [id])
    storeId     String?
    SaleProduct SaleProduct[]
}

model Store {
    id         String    @id @default(uuid())
    name       String
    Product    Product[]
    created_at DateTime  @default(now())
    updated_at DateTime  @updatedAt
    User       User?     @relation(fields: [userId], references: [id])
    userId     String?
}

model Sale {
    id          String        @id @default(uuid())
    total_value Float
    created_at  DateTime      @default(now())
    updated_at  DateTime      @updatedAt
    Buyer       User?         @relation("buyer", fields: [buyerId], references: [id])
    buyerId     String?
    Seller      User?         @relation("seller", fields: [sellerId], references: [id])
    sellerId    String?
    SaleProduct SaleProduct[]
}

model SaleProduct {
    id         String   @id @default(uuid())
    sale_value Int
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
    Sale       Sale     @relation(fields: [saleId], references: [id])
    saleId     String
    Product    Product  @relation(fields: [productId], references: [id])
    productId  String
}
